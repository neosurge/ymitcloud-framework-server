package ${basePackage}.module.${table.moduleName}.dal.mysql.${table.businessName.replace("/",".")};

import java.util.*;

import ${PageResultClassName};
import ${QueryWrapperClassName};
import ${BaseMapperClassName};
import ${basePackage}.module.${table.moduleName}.dal.dataobject.${table.businessName.replace(
    "/",".")}.${table.className}DO;
import org.apache.ibatis.annotations.Mapper;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import org.apache.commons.lang3.StringUtils;
import java.util.function.Consumer;
import ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName.replace(
    "/",".")}.vo.*;

## 字段模板
#macro(listCondition)
    #foreach ($column in $columns)
        #if (${column.listOperation})
            #set ($JavaField = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})##首字母大写
            #if (${column.listOperationCondition} == "=")##情况一，= 的时候
            .eqIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "!=")##情况二，!= 的时候
            .neIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == ">")##情况三，> 的时候
            .gtIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == ">=")##情况四，>= 的时候
            .geIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "<")##情况五，< 的时候
            .ltIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "<=")##情况五，<= 的时候
            .leIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "LIKE")##情况七，Like 的时候
            .likeIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "BETWEEN")##情况八，Between 的时候
            .betweenIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if(${column.javaType.toLowerCase()} == "string" && ${column.columnLength} <= 32)
            .inIfPresent(${table.className}DO::get${JavaField}, reqVO.get${JavaField}s())
            #end
        #end
    #end
#end
/**
* ${table.classComment} Mapper
*/
@Mapper
public interface ${table.className}Mapper extends BaseMapperX
<${table.className}DO> {

    private LambdaQueryWrapperX
    <${table.className}DO> buildQueryWrapper(${sceneEnum.prefixClass}${table.className}QueryReqVO reqVO) {
        LambdaQueryWrapperX
        <${table.className}DO> queryWrapper = new LambdaQueryWrapperX
            <${table.className}DO>()
                .inIfPresent(${table.className}DO::getId, reqVO.getIds())
                #listCondition();
                //仅传入关键词时，才进行条件追加
                #set ($priedt = '->')
                if (StringUtils.isNotBlank(reqVO.getSearchWord())) {
                Consumer
                <LambdaQueryWrapper
                <${table.className}DO>> subLikeQuery = q ${priedt} q
                    .or(false)
                    #foreach ($column in $columns)
                        #set ($JavaField = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})##首字母大写
                        #if(${column.javaType.toLowerCase()} == "string" && ${column.columnLength} > 8)
                            //.or().like(${table.className}DO::get${JavaField}, reqVO.getSearchWord())
                        #end
                    #end
                    ;
                    queryWrapper.and(subLikeQuery);
                    }
                    return queryWrapper;
                    }

                    ## 特殊：树表专属逻辑（树不需要分页接口）
                    #if ( $table.templateType != 2 )
                        default PageResult
                    <${table.className}DO> selectPage(${sceneEnum.prefixClass}${table.className}QueryReqVO reqVO) {
                        LambdaQueryWrapperX
                    <${table.className}DO> queryWrapperX = buildQueryWrapper(reqVO);
                        queryWrapperX.orderByDesc(${table.className}DO::getId); ## 大多数情况下，id 降序
                        return selectPage(reqVO, queryWrapperX);
                        }

                        default List
                    <${table.className}DO> selectList(${sceneEnum.prefixClass}${table.className}QueryReqVO reqVO) {
                        LambdaQueryWrapperX
                    <${table.className}DO> queryWrapperX = buildQueryWrapper(reqVO);
                        queryWrapperX.orderByDesc(${table.className}DO::getId); ## 大多数情况下，id 降序
                        return selectList(queryWrapperX);
                        }
                    #else
                        default List
                    <${table.className}DO> selectList(${sceneEnum.prefixClass}${table.className}QueryReqVO reqVO) {
                        LambdaQueryWrapperX
                    <${table.className}DO> queryWrapperX = buildQueryWrapper(reqVO);
                        queryWrapperX.orderByAsc(${table.className}DO::getId); ## 大多数情况下，id 升序
                        return selectList(queryWrapperX);
                        }

                        default Long existsAnyChildren(Collection
                    <Long> parentIds) {
                        return selectCount(new LambdaQueryWrapperX
                    <${table.className}DO>().in(${table.className}DO::getParentId, parentIds));
                        }
                    #end

                    ## 特殊：树表专属逻辑
                    #if ( $table.templateType == 2 )
                        #set ($TreeParentJavaField = $treeParentColumn.javaField.substring(0,1).toUpperCase() + ${treeParentColumn.javaField.substring(1)})##首字母大写
                        #set ($TreeNameJavaField = $treeNameColumn.javaField.substring(0,1).toUpperCase() + ${treeNameColumn.javaField.substring(1)})##首字母大写
                        default ${table.className}DO selectBy${TreeParentJavaField}And${TreeNameJavaField}
                        (Long ${treeParentColumn.javaField}, String ${treeNameColumn.javaField}) {
                        return selectOne(${table.className}DO::get${TreeParentJavaField}, ${treeParentColumn.javaField}
                        , ${table.className}DO::get${TreeNameJavaField}, ${treeNameColumn.javaField});
                        }

                        default Long selectCountBy${TreeParentJavaField}
                        (${treeParentColumn.javaType} ${treeParentColumn.javaField}) {
                        return selectCount(${table.className}DO::get${TreeParentJavaField}
                        , ${treeParentColumn.javaField});
                        }

                        default  List
                    <${table.className}DO> selectListBytParentId(Long parentId) {
                        return selectList(${table.className}DO::getParentId,parentId);
                        }
                        default List
                    <${table.className}DO> selectListBytParentIds(Collection
                    <Long> parentIds) {
                        LambdaQueryWrapperX
                    <${table.className}DO> queryWrapperX = new LambdaQueryWrapperX
                    <${table.className}DO>().in(${table.className}DO::getParentId, parentIds);
                        queryWrapperX.orderByAsc(${table.className}DO::getId);
                        return this.selectList(queryWrapperX);
                        }
                    #end
                    }