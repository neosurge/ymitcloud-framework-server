package ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName.replace(
    "/",".")};

import org.springframework.web.bind.annotation.*;
import org.apache.commons.lang3.StringUtils;
import jakarta.annotation.Resource;
import org.springframework.validation.annotation.Validated;
#if ($sceneEnum.scene == 1)import org.springframework.security.access.prepost.PreAuthorize;#end
import jakarta.validation.*;
import jakarta.servlet.http.*;
import java.util.*;
import java.io.IOException;
import cn.hutool.core.util.NumberUtil;
import ${PageParamClassName};
import ${PageResultClassName};
import ${CommonResultClassName};
import ${BeanUtils};
import static ${CommonResultClassName}.success;
import ${ExcelUtilsClassName};
import ${OperateLogClassName};
import ${OperateTypeEnumClassName};
import ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName.replace(
    "/",".")}.vo.*;
import ${basePackage}.module.${table.moduleName}.dal.dataobject.${table.businessName.replace(
    "/",".")}.${table.className}DO;
## 特殊：主子表专属逻辑
#foreach ($subTable in $subTables)
import ${basePackage}.module.${subTable.moduleName}.dal.dataobject.${subTable.businessName}.${subTable.className}DO;
#end
import ${basePackage}.module.${table.moduleName}.service.${table.businessName.replace(
    "/",".")}.${table.className}Service;


##@Tag(name = "${sceneEnum.name} - ${table.classComment}")
/**
* ${sceneEnum.name} - ${table.classComment}
*/

@RestController
##二级的 businessName 暂时不算在 HTTP 路径上，可以根据需要写
@RequestMapping("/${table.moduleName}/${simpleClassName_strikeCase}")
@Validated
public class ${sceneEnum.prefixClass}${table.className}Controller {

@Resource
private ${table.className}Service ${classNameVar}Service;


/**
* 创建${table.classComment}
* @param createReqVO 创建请求实体
* @return 创建后的实体
*/
@PostMapping("/create")
#if ($sceneEnum.scene == 1)
@PreAuthorize("@ss.hasPermission('${permissionPrefix}:create')")
#end
@OperateLog(module = "${table.moduleName}",name = "${table.classComment}",type = OperateTypeEnum.CREATE)
public CommonResult<${primaryColumn.javaType}> create${simpleClassName}(@Valid @RequestBody ${sceneEnum.prefixClass}${table.className}SaveBaseVO createReqVO) {
return success(${classNameVar}Service.create${simpleClassName}(createReqVO));
}


/**
* 更新${table.classComment}
* @param updateReqVO 修改请求实体
* @return 修改后的实体
*/
@PutMapping("/update")
#if ($sceneEnum.scene == 1)
@PreAuthorize("@ss.hasPermission('${permissionPrefix}:update')")
#end
@OperateLog(module = "${table.moduleName}",name = "${table.classComment}",type = OperateTypeEnum.UPDATE)
public CommonResult
<Boolean> update${simpleClassName}(@Valid @RequestBody ${sceneEnum.prefixClass}${table.className}SaveBaseVO updateReqVO)
    {
    ${classNameVar}Service.update${simpleClassName}(updateReqVO);
    return success(true);
    }


    /**
    * 删除${table.classComment}
    * @param id 主键集合，使用英文逗号分割
    * @return 结果
    */
    @DeleteMapping("/delete")
    #if ($sceneEnum.scene == 1)
        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:delete')")
    #end
    @OperateLog(module = "${table.moduleName}",name = "${table.classComment}",type = OperateTypeEnum.DELETE)
    public CommonResult
    <Boolean> delete${simpleClassName}(@RequestParam("id") String id) {
        String[] arr = StringUtils.split(id, ",");
        List<${primaryColumn.javaType}> ids = Arrays.stream(arr).filter(NumberUtil::isLong).map(Long::valueOf).toList();
        ${classNameVar}Service.delete${simpleClassName}(ids);
        return success(true);
        }

        /**
        * 获得${table.classComment}
        * @param id 主键
        * @return 对象
        */
        @GetMapping("/get")
        #if ($sceneEnum.scene == 1)
            @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
        #end
        public CommonResult
        <${sceneEnum.prefixClass}${table.className}RespVO> get${simpleClassName}
            (@RequestParam("id") ${primaryColumn.javaType} id) {
            ${table.className}DO ${classNameVar} = ${classNameVar}Service.get${simpleClassName}(id);
            #if ( $table.templateType == 2 )
                return success(${classNameVar}Service.setParents(BeanUtils.toBean(${classNameVar}, ${table.className}
                RespVO.class), "-"));
            #else
                return success(BeanUtils.toBean(${classNameVar}, ${sceneEnum.prefixClass}${table.className}
                RespVO.class));
            #end
            }

            #if ( $table.templateType != 2 )

                /**
                * 获得${table.classComment}分页
                * @param queryReqVO 分页请求参数
                * @return 分页列表
                */
                @GetMapping("/page")
                #if ($sceneEnum.scene == 1)
                    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
                #end
                public CommonResult
                <PageResult
            <${sceneEnum.prefixClass}${table.className}RespVO>> get${simpleClassName}
                Page(@Valid ${sceneEnum.prefixClass}${table.className}QueryReqVO queryReqVO) {
                PageResult
            <${table.className}DO> pageResult = ${classNameVar}Service.get${simpleClassName}Page(queryReqVO);
                return success(BeanUtils.toBean(pageResult, ${sceneEnum.prefixClass}${table.className}RespVO.class));
                }

                ## 特殊：树表专属逻辑（树不需要分页接口）
            #else

                /**
                * 获得${table.classComment}列表
                * @param queryReqVO 查询参数
                */
                @GetMapping("/list")
                #if ($sceneEnum.scene == 1)
                    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
                #end
                public CommonResult
                <List
            <${sceneEnum.prefixClass}${table.className}RespVO>> get${simpleClassName}
                List(@Valid ${sceneEnum.prefixClass}${table.className}QueryReqVO queryReqVO) {
                List
            <${table.className}DO> list = ${classNameVar}Service.get${simpleClassName}List(queryReqVO);
                return success(BeanUtils.toBean(list, ${sceneEnum.prefixClass}${table.className}RespVO.class));
                }
            #end
            #if ( $table.templateType == 2 )
                /**
                * 获得${table.classComment}列表
                * @param queryReqVO 查询参数
                */
                @GetMapping("/list/tree")
                #if ($sceneEnum.scene == 1)
                    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
                #end
                public CommonResult
                <List
            <${sceneEnum.prefixClass}${table.className}RespVO>> get${simpleClassName}
                ListTree(@Valid ${sceneEnum.prefixClass}${table.className}QueryReqVO queryReqVO) {
                List
            <${table.className}DO> list = ${classNameVar}Service.get${simpleClassName}List(queryReqVO);
                return success(${classNameVar}Service.setParents(BeanUtils.toBean(list, ${table.className}RespVO.class),
                "-"));
                }
            #end

            /**
            * 导出${table.classComment} Excel
            * @param queryReqVO 查询参数
            * @throws IOException 异常信息
            */
            @GetMapping("/export-excel")
            #if ($sceneEnum.scene == 1)
                @PreAuthorize("@ss.hasPermission('${permissionPrefix}:export')")
            #end
            @OperateLog(module = "${table.moduleName}",name = "${table.classComment}",type = OperateTypeEnum.EXPORT)
            #if ( $table.templateType != 2 )
                public void export${simpleClassName}Excel(@Valid ${sceneEnum.prefixClass}${table.className}QueryReqVO
                queryReqVO,
                HttpServletResponse response) throws IOException {
                queryReqVO.setPageSize(PageParam.PAGE_SIZE_NONE);

                List
            <${table.className}DO> list = ${classNameVar}Service.get${simpleClassName}Page(queryReqVO).getRecords();

                // 导出 Excel
                ExcelUtils.write(response, "${table.classComment}.xls", "数据", ${table.className}RespVO.class,
                BeanUtils.toBean(list, ${table.className}RespVO.class));
                }
                ## 特殊：树表专属逻辑（树不需要分页接口）
            #else
                public void export${simpleClassName}Excel(@Valid ${sceneEnum.prefixClass}${table.className}QueryReqVO
                queryReqVO,
                HttpServletResponse response) throws IOException {
                List
            <${table.className}DO> list = ${classNameVar}Service.get${simpleClassName}List(queryReqVO);
                // 导出 Excel
                ExcelUtils.write(response, "${table.classComment}.xls", "数据", ${table.className}RespVO.class,
                BeanUtils.toBean(list, ${table.className}RespVO.class));
                }
            #end

            ## 特殊：主子表专属逻辑
            #foreach ($subTable in $subTables)
                #set ($index = $foreach.count - 1)
                #set ($subSimpleClassName = $subSimpleClassNames.get($index))
                #set ($subPrimaryColumn = $subPrimaryColumns.get($index))##当前 primary 字段
                #set ($subJoinColumn = $subJoinColumns.get($index))##当前 join 字段
                #set ($SubJoinColumnName = $subJoinColumn.javaField.substring(0,1).toUpperCase() + ${subJoinColumn.javaField.substring(1)})##首字母大写
                #set ($subSimpleClassName_strikeCase = $subSimpleClassName_strikeCases.get($index))
                #set ($subJoinColumn_strikeCase = $subJoinColumn_strikeCases.get($index))
                #set ($subClassNameVar = $subClassNameVars.get($index))
                // ==================== 子表（$subTable.classComment） ====================

                ## 情况一：MASTER_ERP 时，需要分查询页子表
                #if ( $table.templateType == 11 )

                    /**
                    * 获得${subTable.classComment}分页
                    * @param queryReqVO
                    * @param ${subJoinColumn.javaField} ${subJoinColumn.columnComment}
                    * @return
                    */
                    @GetMapping("/${subSimpleClassName_strikeCase}/page")
                    #if ($sceneEnum.scene == 1)
                        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
                    #end
                    public CommonResult
                    <PageResult
                <${subTable.className}DO>> get${subSimpleClassName}Page(PageParam queryReqVO,
                    @RequestParam("${subJoinColumn.javaField}") ${subJoinColumn.javaType} ${subJoinColumn.javaField}) {
                    return success(${classNameVar}Service.get${subSimpleClassName}
                    Page(queryReqVO, ${subJoinColumn.javaField}));
                    }

                    ## 情况二：非 MASTER_ERP 时，需要列表查询子表
                #else
                    #if ( $subTable.subJoinMany )

                        /**
                        * 获得${subTable.classComment}列表
                        * @param ${subJoinColumn.javaField} ${subJoinColumn.columnComment}
                        * @return
                        */
                        @GetMapping("/${subSimpleClassName_strikeCase}/list-by-${subJoinColumn_strikeCase}")
                        #if ($sceneEnum.scene == 1)
                            @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
                        #end
                        public CommonResult
                        <List
                    <${subTable.className}DO>> get${subSimpleClassName}ListBy${SubJoinColumnName}
                        (@RequestParam("${subJoinColumn.javaField}
                        ") ${subJoinColumn.javaType} ${subJoinColumn.javaField}) {
                        return success(${classNameVar}Service.get${subSimpleClassName}ListBy${SubJoinColumnName}
                        (${subJoinColumn.javaField}));
                        }

                    #else

                        /**
                        * 获得${subTable.classComment}
                        * @param ${subJoinColumn.javaField} ${subJoinColumn.columnComment}
                        * @return
                        */
                        @GetMapping("/${subSimpleClassName_strikeCase}/get-by-${subJoinColumn_strikeCase}")
                        #if ($sceneEnum.scene == 1)
                            @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
                        #end
                        public CommonResult
                    <${subTable.className}DO> get${subSimpleClassName}By${SubJoinColumnName}
                        (@RequestParam("${subJoinColumn.javaField}
                        ") ${subJoinColumn.javaType} ${subJoinColumn.javaField}) {
                        return success(${classNameVar}Service.get${subSimpleClassName}By${SubJoinColumnName}
                        (${subJoinColumn.javaField}));
                        }

                    #end
                #end
                ## 特殊：MASTER_ERP 时，支持单个的新增、修改、删除操作
                #if ( $table.templateType == 11 )

                    /**
                    * 创建${subTable.classComment}
                    * @param ${subClassNameVar}
                    * return
                    */
                    @PostMapping("/${subSimpleClassName_strikeCase}/create")
                    #if ($sceneEnum.scene == 1)
                        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:create')")
                    #end
                    public CommonResult<${subPrimaryColumn.javaType}> create${subSimpleClassName}(@Valid
                    @RequestBody ${subTable.className}DO ${subClassNameVar}) {
                    return success(${classNameVar}Service.create${subSimpleClassName}(${subClassNameVar}));
                    }


                    /**
                    * 更新${subTable.classComment}
                    * @param ${subClassNameVar}
                    * return
                    */
                    @PutMapping("/${subSimpleClassName_strikeCase}/update")
                    #if ($sceneEnum.scene == 1)
                        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:update')")
                    #end
                    public CommonResult
                <Boolean> update${subSimpleClassName}(@Valid @RequestBody ${subTable.className}DO ${subClassNameVar}) {
                    ${classNameVar}Service.update${subSimpleClassName}(${subClassNameVar});
                    return success(true);
                    }

                    /**
                    * 删除${subTable.classComment}
                    * @param id 编号
                    * return
                    */
                    @DeleteMapping("/${subSimpleClassName_strikeCase}/delete")
                    #if ($sceneEnum.scene == 1)
                        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:delete')")
                    #end
                    public CommonResult
                <Boolean> delete${subSimpleClassName}(@RequestParam("id") ${subPrimaryColumn.javaType} id) {
                    ${classNameVar}Service.delete${subSimpleClassName}(id);
                    return success(true);
                    }

                    /**
                    * 获得${subTable.classComment}
                    * @param id 编号
                    * return
                    */
                    @GetMapping("/${subSimpleClassName_strikeCase}/get")
                    #if ($sceneEnum.scene == 1)
                        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
                    #end
                    public CommonResult
                <${subTable.className}DO> get${subSimpleClassName}(@RequestParam("id") ${subPrimaryColumn.javaType} id)
                    {
                    return success(${classNameVar}Service.get${subSimpleClassName}(id));
                    }

                #end
            #end
            }